LinkedList:

List of advantages :

Linked List is Dynamic data Structure .
Linked List can grow and shrink during run time.
Insertion and Deletion Operations are Easier
Efficient Memory Utilization ,i.e no need to pre-allocate memory
Faster Access time,can be expanded in constant time without memory overhead
Linear Data Structures such as Stack,Queue can be easily implemented using Linked list

Disadvantages of Linked List
Memory Usage
More memory is required to store elements in linked list as compared to array. Because in linked list each node contains a pointer and it requires extra memory for itself.
Traversal
Elements or nodes traversal is difficult in linked list. We can not randomly access any element as we do in array by index. For example if we want to access a node at position n then we have to traverse all the nodes before it. So, time required to access a node is large.
Reverse Traversing
In linked list reverse traversing is really difficult. In case of doubly linked list its easier but extra memory is required for back pointer hence wastage of memory.
If you know some other advantages and disadvantages of linked list then please mention by commenting below.


HashMap:
This cannot guarantee the order of insertion when returned back. Used for key-pair values

hashmap.containsKey
hashmap.put
hashmap.remove

TreeMap:
Java TreeMap class is a red-black tree based implementation. It provides an efficient means of storing key-value pairs in sorted order in asc order on key.


NavigableMap: 
Can get the TreeMap in descending order
NavigableMap<Integer,String> map=new TreeMap<Integer,String>();

  map.put(100,"Amit");    
      map.put(102,"Ravi");    
      map.put(101,"Vijay");    
      map.put(103,"Rahul");    
      //Maintains descending order  
      System.out.println("descendingMap: "+map.descendingMap());  
      //Returns key-value pairs whose keys are less than or equal to the specified key.  
      System.out.println("headMap: "+map.headMap(102,true));  
      //Returns key-value pairs whose keys are greater than or equal to the specified key.  
      System.out.println("tailMap: "+map.tailMap(102,true));  
      //Returns key-value pairs exists in between the specified key.  
      System.out.println("subMap: "+map.subMap(100, false, 102, true));   


LinkedHashMap:

	•	Overview: Maintains the order of insertion or, if configured, access order.
	•	Performance: Slightly slower than HashMap because it maintains a linked list for order.
	•	Use Case: When you need predictable iteration order, like preserving insertion or access order.

// To sort hashmap based of the value:
        List<Map.Entry<String, Integer>> entryList = new ArrayList<>(resultSet.entrySet());
        entryList.sort((e1, e2) -> e2.getValue().compareTo(e1.getValue()));
        LinkedHashMap<String, Integer> sortedMap = new LinkedHashMap<>();
        for (Map.Entry<String, Integer> entry : entryList) {
            sortedMap.put(entry.getKey(), entry.getValue());
        }

        import java.util.HashMap;

import java.util.LinkedHashMap;

public class LinkedHashMapExample {
    public static void main(String[] args) {
        LinkedHashMap<Integer, String> map = new LinkedHashMap<>();
        map.put(3, "Three");
        map.put(1, "One");
        map.put(2, "Two");

        System.out.println("LinkedHashMap: " + map);
        // Output: {3=Three, 1=One, 2=Two} (Maintains insertion order)
    }
}

    
Set:
The set interface present in the java.util package and extends the Collection interface is an unordered collection of objects in which duplicate values cannot be stored. 

TreeSet:
A TreeSet is a set where the elements are sorted.

HashSet:
A HashSet is a set where the elements are not sorted or ordered. It is faster than a TreeSet. The HashSet is an implementation of a Set.


Long Vs Int
The datatype int is of 32-bits.	The data type long is of 64-bits.

Call By Value vs Call By Reference:
But Java uses only call by value. It creates a copy of references and pass them as value to the methods. If reference contains objects, then the value of an object can be modified in the method but not the entire object. 





StringBuilder: clear data
stringBuilder.setLength(0);


PriorityQueue:
The priority queue does not follow the FIFO rule like normal Queue. It arranges the elements based on their priorities.
Priority queues can store comparable objects to arrange them in correct priorities.
It has methods like add(), remove(), poll(): to retrieve and remove the element from the head of the queue



Length of Array:
int[][] poit = new int[2][5];

System.out.println(poit.length);   prints 2
System.out.println(poit[0].length); prints 5


Sorting:
ArrayList:
		Collections.sort(nums);
		Collections.sort(nums,Collections.reverseOrder())

Sort array:
Arrays.sort(num[])

List<Interval> intervals = new ArrayList<>();
intervals.sort((a, b) -> a.start - b.start);

You can create a stack by call util here:
Stack<Character> stack = new Stack<>();

You can perform a binary search by calling
Arrays.binarySearch(int[] a, int key) returns the index. returns -1 if not found

Loop through HashMap:
Map<Integer,Integer> mp = new HashMap<Integer,Integer>();

for (Map.Entry<Integer,Integer> vl : mp.entrySet()){
    mp.getKey();
    mp.getValue();
}

// Convert Integer to Binary:
Integer.toBinaryString(int i)


// Kedane Algorithm is used to get the maximum num of subarray
public int maxSubArray(int[] nums) {
        int currentSumValue = nums[0];
        int maxValue = nums[0];
        for (int i = 1; i < nums.length; i++) {
            currentSumValue = Math.max((currentSumValue + nums[i]), nums[i]);
            maxValue = Math.max(currentSumValue, maxValue);
        }
        return maxValue;
    }
